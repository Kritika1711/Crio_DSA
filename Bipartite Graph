import java.util.*;
class PossibleBipartition {
	private static String possibleBipartition(int n, Vector<Vector<Integer> > edges) {
          ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
           for(int i = 0; i <= n; i++){
            adj.add(new ArrayList<Integer>());
        }
          for(int i=0;i<edges.size();i++){
               adj.get(edges.get(i).get(0)).add(edges.get(i).get(1));
               adj.get(edges.get(i).get(1)).add(edges.get(i).get(0));
          }
          int[] color=new int[n+1];
          Arrays.fill(color,-1);
          for(int i=1;i<=n;i++){
               if(color[i]==-1){
                    if(!bfs(adj,color,i)){
                         return "Not Possible";
                    }
               }
          }
          return "Possible";
	}

     public static boolean bfs(ArrayList<ArrayList<Integer>> adj,int[] color, int i){
          Queue<Integer> q=new LinkedList<>();
          q.add(i);
          color[i]=1;
          while(!q.isEmpty()){
               Integer node=q.poll();
               for(Integer it:adj.get(node)){
                    if(color[it]==-1){
                         color[it]=1-color[node];
                         q.add(it);
                    }
                    else if(color[it]==color[node]){
                         return false;
                    }
               }
          }
          return true;

     }

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		for (int tests = 0; tests < t; tests++) {
			int n = sc.nextInt();
			int m = sc.nextInt();

			Vector<Vector<Integer> > edges = new Vector<Vector<Integer> >();
			for (int i = 0; i < m; i++) {
				int u = sc.nextInt();
				int v = sc.nextInt();
				Vector<Integer> edge = new Vector<Integer>();
				edge.add(u);
				edge.add(v);
				edges.add(edge);
			}
			System.out.println(possibleBipartition(n, edges));
		}
		sc.close();
	}
}
