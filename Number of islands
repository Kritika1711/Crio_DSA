class Solution {
    public int numIslands(char[][] grid) {
         int n=grid.length;int m=grid[0].length;
        int result=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                     dfs(grid,i,j,n,m);
                     result++;
                    // max_area=Math.max(result,max_area);
                }
            }
        }
        return result;
    }
    static void dfs(char[][] grid,int i,int j,int n,int m){
        if(isValid(i,j,n,m) && grid[i][j]=='1'){
            grid[i][j]='0';
         dfs(grid,i+1,j,n,m) ;
          dfs(grid,i-1,j,n,m) ; 
          dfs(grid,i,j+1,n,m) ;
           dfs(grid,i,j-1,n,m);
        }
        // return 0;
    }
   static boolean isValid(int i,int j,int n,int m){
        if(i>=0 && i<n && j>=0 && j<m){
            return true;
        }
        return false;
    }
}
