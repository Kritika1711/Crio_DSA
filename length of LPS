static int longestPalindromicSubstringLength(String str) { 
        boolean[][] dp=new boolean[str.length()][str.length()];
        int max=0;
        for(int g=0;g<str.length();g++){
            int i=0;
            for(int j=g;j<dp.length;j++){
                if(g==0)dp[i][j]=true;
                else if(g==1){
                    if(str.charAt(i)==str.charAt(j)){
                        dp[i][j]=true;
                    }
                    else{
                        dp[i][j]=false;
                    }
                }
                else{
                    if(str.charAt(i)==str.charAt(j) && dp[i+1][j-1]==true){
                        dp[i][j]=true;
                    }
                    else{
                        dp[i][j]=false;
                    }
                }
                if(dp[i][j]){
                    max=Math.max(max,g+1);
                }
                i++;
            }
        }
        return max;
    } 
    
    if we have to return the longest string palindrome substring::
    
    class Solution {
    public String longestPalindrome(String str) {
        String s="";
        boolean[][] dp=new boolean[str.length()][str.length()];
        int max=0;
        for(int g=0;g<str.length();g++){
            int i=0;
            for(int j=g;j<dp.length;j++){
                if(g==0)dp[i][j]=true;
                else if(g==1){
                    if(str.charAt(i)==str.charAt(j)){
                        dp[i][j]=true;
                    }
                    else{
                        dp[i][j]=false;
                    }
                }
                else{
                    if(str.charAt(i)==str.charAt(j) && dp[i+1][j-1]==true){
                        dp[i][j]=true;
                    }
                    else{
                        dp[i][j]=false;
                    }
                }
                if(dp[i][j]){
                   if(g+1>max){
                       max=g+1;
                       s=str.substring(i,j+1);
                   }
                }
                i++;
            }
        }
        return s;
    
    }
}
