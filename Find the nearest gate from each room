You are given a m x n 2D grid initialized with these three possible values:

-1 - A wall or an obstacle, you cannot go through here.

0 - A gate.

INF - Infinity means an empty room. We use the value 2^31 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.

Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Constraints
1 <= M,N <= 1000

Sample Input 1
4 4

INF -1 0 INF

INF INF INF -1

INF -1 INF -1

0 -1 INF INF

Sample Output 1
3 -1 0 1

2 2 1 -1

1 -1 2 -1

0 -1 3 4

Solution
:

import java.util.*;
import java.io.*;
class WallsAndGates {

	public static int[][] WallsAndGates(int [][] grid , int n, int m) {
          Queue<Pair> q=new LinkedList<>();
          for(int i=0;i<n;i++){
               for(int j=0;j<m;j++){
                    if(grid[i][j]==0){
                         q.add(new Pair(i,j));
                    //     System.out.println(i+" "+j);
                    }
               }
          }
        int[][] dir=new int[4][2];
        dir[0][0]=1;dir[0][1]=0;
        dir[1][0]=-1;dir[1][1]=0;
        dir[2][0]=0;dir[2][1]=-1;
        dir[3][0]=0;dir[3][1]=1;

          while(!q.isEmpty()){
       
              Pair p = q.remove();
              int x1= p.x;int y1=p.y;
              for(int i=0;i<4;i++){
                     int x = x1+dir[i][0];
                    int y=y1+dir[i][1];
                     if(x>=0 && x<n && y>=0 && y<m && grid[x][y]==Integer.MAX_VALUE){
                        grid[x][y]=Math.min(grid[x][y],grid[x1][y1]+1);
                        q.add(new Pair(x,y));
                     }
              }

              
          }
          return grid;

	}
    
	public static void main(String []args) {
		int n, m;
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		int [][] grid = new int[n + 1][m + 1];
		for ( int i = 0; i < n; i++) {
			for ( int j = 0; j < m; j++) {
				grid[i][j] = sc.nextInt();
			}
		}
		int [][] distance = WallsAndGates(grid, n, m);
		for ( int i = 0; i < n; i++) {
			for ( int j = 0; j < m; j++) {
				System.out.print(distance[i][j] + " ");
			}
			System.out.println();
		}
	}
}
class Pair{
     int x;
     int y;
     public Pair(int x,int y){
          this.x=x;
          this.y=y;
     }
}
