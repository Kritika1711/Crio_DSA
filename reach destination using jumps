optimized 

class Solution {
    public boolean canJump(int[] nums) {
        int i=0;int max=0;
        while(max<nums.length-1 && i<=max){
            max=Math.max(i+nums[i],max);
            i++;
        }
        if(max>=nums.length-1)return true;
        return false;
    }
}


dp approach

public String canJump(int[] nums) {
         int[] dp=new int[nums.length];
        int n=nums.length;
        dp[n-1]=1;
        if(n==1)return "true";
        for(int i=n-1;i>=0;i--){
            for(int j=1;j<=nums[i] && i+j<n;j++){
                dp[i]+=dp[i+j];
            }
        }
        if(dp[0]>0)return "true";
        return "false";
    }
